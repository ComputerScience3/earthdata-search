<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <title><%= site_page_title('Downloads') %></title>
  <link rel="shortcut icon" href="/favicon.ico?v=1.1">
  <style>
    .pre-container {
      min-height: 20px;
      padding: 19px;
      margin-bottom: 20px;
      background-color: #f5f5f5;
      border: 1px solid #e3e3e3;
      border-radius: 4px;
      -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.05);
      box-shadow: inset 0 1px 1px rgba(0,0,0,.05);
    }

    #download-button {
      color: #fff;
      background-color: #5382b1;
      background-image: -webkit-linear-gradient(#5382b1, #315880);
      background-image: linear-gradient(#5382b1, #315880);
      border: none;
      text-shadow: 1px 1px 1px #315880;
      display: inline-block;
      padding: 8px 12px;
      border-radius: 3px;
      font-size: small;
      text-decoration: none;
    }

    div {
      margin: 20px;
    }

    pre {
      font-size: smaller;
    }
  </style>
</head>
<body>
<div id="errors"></div>
<div id="loading">Preparing download script. Fetching downloadable granule links...</div>
<div id="download-description" style="display: none;">
  <h2>How to use this script</h2>
  <p>Linux: You must first make the script an executable by running the line 'chmod 777 download.sh' from the command line.  After that is complete, the file can be executed by typing './download.sh'.</p>
  <p>For a detailed walk through of this process, please reference this <a target="_blank" href='https://wiki.earthdata.nasa.gov/display/EDSC/How+To%3A+Use+the+Download+Access+Script'>How To guide</a>.</p>
  <p>Windows: The file can be executed within Windows by first installing a Unix-like command line utility such as <a href='https://www.cygwin.com/'>Cygwin</a>. After installing Cygwin (or a similar utility), run the line 'chmod 777 download.sh' from the utility's command line, and then execute by typing './download.sh'.</p>

  Script preparation completed. Please click the button to download the script. <a href="#" id="download-button">Download Script File</a>
</div>
<div class="pre-container">
  <pre id="script">
#!/bin/sh

GREP_OPTIONS=''

cookiejar=$(mktemp cookies.XXXXXXXXXX)
netrc=$(mktemp netrc.XXXXXXXXXX)
chmod 0600 "$cookiejar" "$netrc"
function finish {
  rm -rf "$cookiejar" "$netrc"
  <% if @first_link && @first_link.start_with?('ftp') %>
  <% # For FTP retrievals, we also need to clean up ~/.netrc file for safety reasons %>
  dot_netrc_tmp=$(mktemp ~/.netrc.tmp.XXXXXXXXXX)
  chmod 0600 "$dot_netrc_tmp"
  if [ -e ~/.netrc ]
  then
    awk '!/<%= @first_link[/ftp:\/\/([^\/]*)\/.*/, 1].gsub('.', '\.') %>/' ~/.netrc > $dot_netrc_tmp && mv $dot_netrc_tmp ~/.netrc
  fi
  <% end %>
}

trap finish EXIT
WGETRC="$wgetrc"

prompt_credentials() {
    echo "Enter your Earthdata Login or other provider supplied credentials"
    read -p "Username (<%= @user %>): " username
    username=${username:-<%= @user %>}
    read -s -p "Password: " password
    echo "machine <%= echo_client.urs_root %> login $username password $password" >> $netrc
    <% if @first_link && @first_link.start_with?('ftp') %>
    echo "machine <%= @first_link[/ftp:\/\/([^\/]*)\/.*/, 1] %> login $username password $password" >> $netrc
    <% end %>
    echo
}

exit_with_error() {
    echo
    echo "Unable to Retrieve Data"
    echo
    echo $1
    echo
    echo "<%=raw @first_link %>"
    echo
    exit 1
}

prompt_credentials
<% if @first_link && @first_link.start_with?('https://datapool.asf.alaska.edu') %>
  <%= render partial: 'asf_download' %>
<% else %>
  <%= render partial: 'generic_download' %>
<% end %>
    fetch_urls() {
    if command -v curl >/dev/null 2>&1; then
        setup_auth_curl
        while read -r line; do
          # Get everything after the last '/'
          filename="${line##*/}"

          # Strip everything after '?'
          stripped_query_params="${filename%%\?*}"

        <% if @first_link && @first_link.start_with?('ftp') %>
          curl -f -g --netrc-file "$netrc" -o $stripped_query_params $line && echo || exit_with_error "Command failed with error. Please retrieve the data manually."
        <% elsif @first_link && !@first_link.empty? %>
          curl -f -b "$cookiejar" -c "$cookiejar" -L --netrc-file "$netrc" -g -o $stripped_query_params -- $line && echo || exit_with_error "Command failed with error. Please retrieve the data manually."
        <% else %>
          echo "No downloadable links are found."
        <% end %>
        done;
    elif command -v wget >/dev/null 2>&1; then
        # We can't use wget to poke provider server to get info whether or not URS was integrated without download at least one of the files.
        echo
        echo "WARNING: Can't find curl, use wget instead."
        echo "WARNING: Script may not correctly identify Earthdata Login integrations."
        echo
        setup_auth_wget
        while read -r line; do
          # Get everything after the last '/'
          filename="${line##*/}"

          # Strip everything after '?'
          stripped_query_params="${filename%%\?*}"

          wget --load-cookies "$cookiejar" --save-cookies "$cookiejar" --output-document $stripped_query_params --keep-session-cookies -- $line && echo || exit_with_error "Command failed with error. Please retrieve the data manually."
        done;
    else
        exit_with_error "Error: Could not find a command-line downloader.  Please install curl or wget"
    fi
}

fetch_urls <<'EDSCEOF'
</pre>
</div>
<ul id="links">
</ul>

<script>
  (function () {

    function downloadFileIE(e) {
      var blob = new Blob([e.target.scriptFileContent]);
      window.navigator.msSaveOrOpenBlob(blob, e.target.scriptFileName);
    }

    document.addEventListener('EdscScriptLoaded', function(){
      var dlLink = document.getElementById('download-button');
      dlLink.scriptFileContent = document.getElementById("script").textContent;
      dlLink.scriptFileName = 'download.sh';

      var isIE = /*@cc_on!@*/false || !!document.documentMode;
      if (isIE) {
        dlLink.addEventListener('click', downloadFileIE);
      }
      else {
        var file = new Blob([dlLink.scriptFileContent], {type: 'text/plain;charset:utf-8'});
        dlLink.href = URL.createObjectURL(file);
        dlLink.download = dlLink.scriptFileName;
      }
    });

    var browseOnly = <%= @query.delete('browse') %>;
    var currentPage = <%= @query['page_num'] %>;
    var project = <%= @query['project'] %>;
    var collection = '<%= @query['collection'] %>';
    var cmrHits = -1;

    function getNextPageUrl() {
      queryPageNum = parseInt(url.match(/page_num=(\d+)/)[1]);
      if (queryPageNum * 2000 > cmrHits) {
        return null;
      }
      currentPage++;
      url = url.replace(/page_num=\d+/, 'page_num=' + currentPage);
      return url;
    }

    function finish() {
      preContent = document.getElementById('script');
      preContent.innerHTML += '\nEDSCEOF';

      var event = document.createEvent('Event');
      event.initEvent('EdscScriptLoaded', true, true);
      document.getElementById("download-button").dispatchEvent(event);

      document.getElementById('loading').style.display = 'none';
      document.getElementById('download-button').style.display = 'inline';
      document.getElementById('download-description').style.display = 'inherit';
    }

    function onLoad() {
      var doc = JSON.parse(this.response);
      cmrHits = doc['CMR-Hits'];
      document.getElementById('loading').innerHTML = 'Loading more... (parsed ' + (currentPage * 2000 > cmrHits ? cmrHits : (currentPage * 2000)) + ' of ' + cmrHits + ')';
      var links = doc.links;
      preContent = document.getElementById('script');
      preContent.innerHTML += links.join("\n");
      var next = getNextPageUrl();
      if (next) {
        preContent.innerHTML += '\n'
        fetchLinks(next);
      }
      else {
        finish();
      }
    }

    function onError() {
      document.getElementById('loading').textContent = "There was an error loading granules. Refresh this page to try again.";
      finish();
    }

    function onAbort() {
      finish();
    }

    function fetchLinks(url) {
      var request = new XMLHttpRequest();
      request.open('GET', url, true);
      request.send(null);

      request.addEventListener("load", onLoad, false);
      request.addEventListener("error", onError, false);
      request.addEventListener("abort", onAbort, false);
    }

    var url = "/granules/fetch_links.json?page_num=1&browse=" + browseOnly + "&project=" + project + "&collection=" + collection;
    fetchLinks(url);
  })();
</script>

</body></html>
