#!/usr/bin/env ruby
require 'pathname'

# path to your application root.
APP_ROOT = Pathname.new File.expand_path('..', __dir__)
@first = true

def run_cmd(command)
  prefix = '    '
  puts "#{prefix}$ #{command}"
  result = `#{command} 2>&1`
  out = result.gsub(/\n\s*\n/, "\n").chomp
  puts out.gsub(/^/, "#{prefix}  -> ") unless out.empty?

  return if $?.success?
  puts "Exiting: Error executing command #{command}"
  exit(1)
end

def warn(message)
  puts "WARNING: #{message}"
end

def section(title)
  prefix = @first ? "" : "\n"
  @first = false
  puts "#{prefix}== #{title} =="
  yield
end

Dir.chdir APP_ROOT do
  section 'Updating submodules' do
    run_cmd 'git submodule init'
    run_cmd 'git submodule update'
  end

  section 'Copying example configuration' do
    if File.exist?('config/database.yml')
      puts 'config/database.yml already exists'
    else
      warn 'Using example config/database.yml. Please configure it for your application.'
      run_cmd 'cp config/database.yml.example config/database.yml'
    end
    if File.exist?('config/application.yml')
      puts 'config/application.yml already exists'
    else
      warn 'Using example config/application.yml. Please configure it for your application.'
      run_cmd 'cp config/application.yml.example config/application.yml'
    end
  end

  section 'Building docker container' do
    run_cmd 'docker-compose build'
  end

  section 'Preparing database (development and test environments)' do
    run_cmd 'docker-compose run web bundle exec rake db:setup'
    run_cmd 'docker-compose run web bundle exec rake db:setup RAILS_ENV=test'
  end

  section 'Pull down and store colormaps' do
    run_cmd 'docker-compose run web bundle exec rake colormaps:load'
    run_cmd 'docker-compose run web bundle exec rake colormaps:load RAILS_ENV=test'
  end
end
